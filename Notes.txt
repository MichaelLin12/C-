dotnet --version --> check version of C# compiler


dotnet new console -o app --> create new console app
cd app
code . # to open project in VSCode

dotnet run --> to run the app


C# data types
-int a = 10;
-string name = "John";
    - name[0] = 'M'; --> error
    - name[0]; --> 'J'
-char grade = 'A';
-bool isWorking = true;
-double price = 1.99;
-float price = 1.99f;
-DateTime today = DateTime.Now;
-DateTime today = new DateTime(2020, 1, 1);
-DateTime today = DateTime.Today;


C# string methods
-string.ToUpper();
-string.ToLower();
-string.Trim(); --> remove white spaces
-string.Contains("John");
-string.StartsWith("John");
-string.EndsWith("John");
-string.IndexOf('a');
-string.LastIndexOf('a');
-string.Substring(0, 4);
-string.Replace('a', '!'); --> replace first occurence
-string.Replace("mosh", "Mosh"); --> replace all occurences
-string.Split(' '); --> split by space
-string.Split(new char[] { ' ', ',' }); --> split by space and comma
-string.Join('-', array); --> join array with -
-string.IsNullOrEmpty(str); --> check if string is null or empty
-string.IsNullOrWhiteSpace(str); --> check if string is null or white space
-string.Format("Hi {0}", name); --> format string with name
-string.Length; --> get length of string


C# type conversion
-implicit conversion
    int i = 10;
    float f = i;
-explicit conversion
    float f = 10.99f;
    int i = (int)f;
    int i = Convert.ToInt32(f);
    int i = int.Parse(f);
    int i = int.Parse("1234");
    int i = int.Parse("1234.56"); --> error
    int i = Convert.ToInt32("1234.56"); --> error
    int i = Convert.ToInt32("1234"); --> 1234
    int i = Convert.ToInt32(null); --> error
    int i = Convert.ToInt32("abc"); --> error
    int i = C

Math methods
    -Math.Max(1, 2);
    -Math.Min(1, 2);
    -Math.Round(1.2);
    -Math.Floor(1.2);
    -Math.Ceiling(1.2);
    -Math.Sqrt(9);
    -Math.Abs(-1);
    -Math.Pow(2, 3);
    -Math.PI;
    -Math.E;
    -Math.Log(10); --> base e
    -Math.Log10(10);
    -Math.Log2(10);
    -Math.Sin(10);
    -Math.Cos(10);
    -Math.Tan(10);
    -Math.Epsilon;

String interpolation
    -string name = "John";
    -string message = $"Hi {name}"; --> Hi John

Switch Statement
    - can only be used with byte, int, char, string
    ex. switch (role)
        {
            case "admin":
                Console.WriteLine("You're an admin");
                break;
            case "moderator":
                Console.WriteLine("You're a moderator");
                break;
            default:
                Console.WriteLine("You're a guest");
                break;
        }

Enums
    - set of name/value pairs (constants)
    - it is assumed that the value is an integer starting from 0 by default
    
    ex. enum Season
        {
            Spring,
            Summer,
            Autumn,
            Winter
        }

        Season season = Season.Autumn;

        switch (season)
        {
            case Season.Autumn:
            case Season.Summer:
                Console.WriteLine("We've got promotion");
                break;
            default:
                Console.WriteLine("I don't understand that season");
                break;
        }

Multi-Dimensional Arrays
    - int[,] numbers = new int[3, 5];
    - int[,] numbers = new int[3, 5]
        {
            {1, 2, 3, 4, 5},
            {6, 7, 8, 9, 10},
            {11, 12, 13, 14, 15}
        };


Exception Handling
    try{
            var num = int.Parse("abc");
    }catch (Exception){
            Console.WriteLine("Conversion failed");
    }finally{
        Console.WriteLine("Finally block");
    }


Getters and Setters
    - c# has getters and setters for private fields
    ex. public class Person
        {
            private DateTime birthdate;
            public birthdate{
                get {return birthdate;}
                set {birthdate = value;}
            }
        }

dynamic types
    ex. dynamic a = 10;
        dynamic b = "abc";
        dynamic c = new List<int>();
        c.Add(1);
        c.Add("abc"); --> error

static
    - static members belong to the class itself
    - static members can be accessed without creating an instance of the class
    - static members are only initialized once at the start of the program
    - static classes cannot be instantiated